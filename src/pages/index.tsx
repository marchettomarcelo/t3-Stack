import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useState } from "react";

const Home: NextPage = () => {
  const msgs = trpc.example.allMsgs.useQuery();
  const addi = trpc.example.addMsg.useMutation({
    onSuccess: () => {
      msgs.refetch();
    },
  });

  const deleteMessage = trpc.example.deleteMsg.useMutation({
    onSuccess: () => {
      msgs.refetch();
    },
  });

  const [formData, setFormData] = useState("oi");

  function handleSubmit() {
    addi.mutate({ msg: formData });
  }

  function handleDelete(e: any) {
    const idMessage: string = e.target.id;

    deleteMessage.mutate({
      id: idMessage,
    });
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-4 bg-gradient-to-b pt-10 ">
        <div className="flex w-9/12 flex-col">
          <p>Insira uma nota</p>
          <input
            className="w-full rounded-md border p-4 shadow-md"
            type="text"
            value={formData}
            onChange={(e) => setFormData(e.target.value)}
          />
        </div>
        <button
          className="rounded-md border-2 border-black p-4"
          onClick={handleSubmit}
        >
          Adicionar Nota
        </button>
        <div className="flex h-96 w-9/12 flex-col gap-4 overflow-y-scroll">
          {msgs &&
            msgs.data?.map((mensagem) => {
              return (
                <div className="flex  cursor-pointer flex-row justify-between rounded-md border bg-zinc-50 p-4 shadow-md">
                  <p key={mensagem.id} id={mensagem.id} onClick={handleDelete}>
                    {mensagem.msg}
                  </p>
                  <svg
                    id={mensagem.id}
                    onClick={handleDelete}
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="h-6 w-6"
                  >
                    <path
                      id={mensagem.id}
                      onClick={handleDelete}
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                    />
                  </svg>
                </div>
              );
            })}
        </div>
        <AuthShowcase />
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-black">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
