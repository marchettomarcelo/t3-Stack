import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useState } from "react";

const Home: NextPage = () => {
  const msgs = trpc.example.allMsgs.useQuery();
  const addi = trpc.example.addMsg.useMutation({
    onSuccess: () => {
      msgs.refetch();
    },
  });

  const deleteMessage = trpc.example.deleteMsg.useMutation({
    onSuccess: () => {
      msgs.refetch();
    },
  });

  const [formData, setFormData] = useState("oi");

  function handleSubmit() {
    addi.mutate({ msg: formData });
  }

  function handleDelete(e: any) {
    const idMessage: string = e.target.id;

    deleteMessage.mutate({
      id: idMessage,
    });
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b ">
        <input
          className="border "
          type="text"
          value={formData}
          onChange={(e) => setFormData(e.target.value)}
        />
        <button className="border-4 border-black" onClick={handleSubmit}>
          mandar msg
        </button>

        {msgs &&
          msgs.data?.map((mensagem) => {
            return (
              <p key={mensagem.id} id={mensagem.id} onClick={handleDelete}>
                {mensagem.msg}
              </p>
            );
          })}
        <AuthShowcase />
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-black">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>

      {sessionData?.user?.image && <img src={sessionData.user.image} alt="" />}
    </div>
  );
};
